generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  image    String    @default("/defaultProfile.png")
  name     String    @unique
  password String?
  provider String    @default("credentials")
  bugs     Bug[]
  shares   Share[]
  sharedFrom    Bug[]     @relation("SharedFrom")
  comments Comment[]
  reports Report[]
  conversations Conversation[] @relation("CurrentUser")
  recipients  Conversation[] @relation("RecipientUser")
  messages Message[] @relation("userMessage")
  receiversUsers Message[] @relation("receiverUser")
}
model Conversation{
  userId String
  user User @relation("CurrentUser",fields: [userId],references: [id])
  recipientId String
  recipient User @relation("RecipientUser",fields: [recipientId],references: [id])
  messages Message[]
  @@id([userId,recipientId])
}
model Message {
  id String @id @default(uuid())
  userId String
  user User @relation("userMessage",fields: [userId],references: [id])
  recipientId String
  recipient User @relation("receiverUser",fields: [recipientId],references: [id])
  conversation Conversation @relation(fields: [userId,recipientId],references: [userId,recipientId])
  message String
}
model Bug {
  id          String    @id @default(uuid())
  title       String
  description String?
  imageUrl    String?
  tags        String[]
  relevant    String[]
  comments    Comment[]
  code        String?
  language    String?
  solved      Boolean @default(false)
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shares      Share[]
  isShared    Boolean @default(false)
  sharedFromId String?
  sharedFrom   User?     @relation("SharedFrom", fields: [sharedFromId], references: [id])
  reports Report[]
}
model Share {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  bugId  String
  bug    Bug    @relation(fields: [bugId], references: [id], onDelete: Cascade)

  @@id([userId, bugId])
}

model Comment {
  id          String   @id @default(uuid())
  bugId       String
  bug         Bug      @relation(fields: [bugId], references: [id], onDelete: Cascade)
  commentText String
  imageUrl    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Report {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  bugId String
  bug Bug @relation(fields: [bugId],references: [id], onDelete: Cascade)
}